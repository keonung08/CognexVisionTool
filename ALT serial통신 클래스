using System;
using System.IO.Ports;

namespace altcontroller
{
    public class SerialPortManager
    {
        private System.IO.Ports.SerialPort port;
        private byte[] recvBuf = new byte[1024];

        public event Action<string> DataReceived; // UI로 로그 전달용 이벤트
        public event Action<string> DataSent;     // UI로 송신 로그 전달용 이벤트

        public SerialPortManager()
        {
            port = new System.IO.Ports.SerialPort();
            port.BaudRate = 19200;
            port.DataReceived += OnDataReceived;
        }

        // 사용 가능한 포트 목록
        public string[] GetAvailablePorts()
        {
            return System.IO.Ports.SerialPort.GetPortNames();
        }

        // 포트 연결/해제
        public bool TogglePort(string portName)
        {
            if (!port.IsOpen)
            {
                port.PortName = portName;
                port.Open();
                return true; // 열린 상태
            }
            else
            {
                port.Close();
                return false; // 닫힌 상태
            }
        }

        // 개별 채널 패킷 생성
        public byte[] CreatePacket(byte command, byte channel, byte brightValue)
        {
            byte[] bytes = new byte[]
            {
                0x4C,       // Header
                command,    // Command
                channel,    // Channel
                brightValue // Data
            };

            byte checksum = 0x00;
            foreach (byte b in bytes)
                checksum ^= b;

            return new byte[]
            {
                bytes[0], bytes[1], bytes[2], bytes[3],
                checksum, 0x00, 0x0A // Tail
            };
        }


        // 4채널 동시 전송 패킷
        public byte[] CreateAllChannelPacket(byte ch1, byte ch2, byte ch3, byte ch4)
        {
            byte[] packet = new byte[10];
            packet[0] = 0x4C; // Header
            packet[1] = 0x15; // Command
            packet[2] = 0x00; // Write All
            packet[3] = ch1; // 1번 채널의 밝기 값
            packet[4] = ch2; // 2번 채널의 밝기 값
            packet[5] = ch3; // 3번 채널의 밝기 값
            packet[6] = ch4; // 4번 채널의 밝기 값

            int checksum = packet[2] ^ packet[3] ^ packet[4] ^ packet[5] ^ (packet[6] + 0x01);
            packet[7] = (byte)checksum;
            packet[8] = 0x00; // Tail1
            packet[9] = 0x0A; // Tail2

            return packet;
        }

        // 데이터 전송
        public void Send(byte[] data)
        {
            if (port.IsOpen)
            {
                port.Write(data, 0, data.Length);
                DataSent?.Invoke(BitConverter.ToString(data));
            }
            else
            {
                throw new InvalidOperationException("포트가 열려있지 않습니다.");
            }
        }

        // 내부 수신 처리
        private void OnDataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            int readCnt = port.Read(recvBuf, 0, recvBuf.Length);
            byte lastByte = recvBuf[readCnt - 1];
            DataReceived?.Invoke($"[RX] Bytes: {readCnt}, LastByte: {lastByte:X2}");
        }
    }
}
